#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =
$ns node-config
    -adhocRouting Network
    -...

tcl/lib/ns-lib.tcl
{{{
Simulator instproc create-wireless-node args {
        switch -exact $routingAgent_ {
        Network {
		    set ragent [$self create-network-agent $node]
	    }
}}}

nemo/ns-mipv6.tcl
{{{
Simulator instproc create-network-agent { node } {
	set nodetype_ [$self get-nodetype]

	#puts "create-network-agent in ns-mipv6.tcl"

	if { $nodetype_ == "BS" } {
		set ragent [new Agent/NetworkRouting/NetworkBS]
		$ragent mip-agent [$node set regagent_]
	} else {
	if { $nodetype_ == "MN" } {
		set ragent [new Agent/NetworkRouting/NetworkMN]
		$ragent mip-agent [$node set regagent_]
		$ragent decap-port [Simulator set DECAP_PORT]
	} else {
	if { $nodetype_ == "MR" } {
		set ragent [new Agent/NetworkRouting/NetworkMR]
		$ragent mip-agent [$node set regagent_]
		$ragent decap-port [Simulator set DECAP_PORT]
	} else {
	if { $nodetype_ == "LFN" } {
		set ragent [new Agent/NetworkRouting/NetworkLFN]
		$ragent mip-agent [$node set regagent_]
		$ragent decap-port [Simulator set DECAP_PORT]
	} else {
		puts "Wrong Routing Agent"
	}}}}

	set addr [$node node-addr]
	$ragent addr $addr
	$ragent node $node

	if [[Simulator instance] set mipv6_] {
		$ragent port-dmux [$node set dmux_]
	}

	$node set ragent_ $ragent

	return $ragent
}
}}}
|| table || cells ||

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages